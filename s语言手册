                                                                          S语言手册
                                                                              Joshua Sun
1、社区
  http://github.com/guodongsun/s-lang
  s语言作者：
    Joshua Sun
  contributors:
    Joshua Sun

2、语言特点
  .极致运行时效率：无垃圾回收器
  .原生功能丰富：语言层面，支持高并发、高性能、分布式(事务)
  .类型系统：弱类型，类型推导、转换、优化
  .极简原则：最大化屏蔽Error、Warning，容易快速Debug
  .兼容性：向后多本兼容
  .高质量库：插件、程序库安全稳定
  .语言级别，代码分层，(明确开发人员分工)，提高开发效率
  .版本升级：获得最新语言层面核心业务/系统解决方案

3、语言目标/背景
  在语言层面，为处理诸如线程性能、安全、稳定、分布式等技术问题，以及开发中的生产效率低下、跨端/平台应用复杂等实际问题，探索/寻求/提供一种解决方案。

4、语言设计哲学/思想/方法论
  不同于面向过程的语言，如C，也不同于面向对象的语言如Java，S语言，是面向协议的语言，即POP（Protocol Oriented Programming），将世界抽象成两个核心部分：
    .protocol（协议）
    .thing（物体）
  protocol，定义thing的行为(函数/方法签名)，thing是代码执行的基本单元(实现函数/方法)，thing follow(遵循) protocol:
    .1个thing必须follow至少1个protocol
    .1个protocol可以被多个thing follow
    .一到多个thing，通过protocol，组合成一个s语言程序(文件)。

5、搭建开发环境
  下载编译器sc压缩包，如sc-0.1.linux-amd64.zip，解压到目录，即可使用，

6、工程结构/脚手架
  APP
  |- App1
      |- Module1
      |- Module2
      |_ main.sc
    |_ App2
  |-Config
    |-Public
    |-Config1
    |_Config2
  |-Library
    |-System
    |-3rd
    |_self
  Target
    |-App1
    |_App2
  |_ Test

7、s语言教程
  s语言程序文件，以”.sc”作为扩展名。
  7.1、HelloWorld.sc :
    use “system/io/output”;
    protocol main{
      void main();
    }

    thing thingHelloWorld follow main{
        void main(){
          output.println(“Hello World!”);
        }
    }
    thingHelloWorld .main();

  7.2、数据类型
    s语言中，所有的类型，都是protocol，程序运行的基本单位是thing，共有3种基础类型：
      .整型：tInt
      .字符(串)：tString
      .布尔型：tBool
    其它语程序言中的byte、short、float、double、char等类型，s语言中利用智能的类型优化子系统进行处理（编译时+运行时）。

  7.3、thing
    s语言中，代码组织/包装的基本单位是thing，thing的成员可以包含属性、方法，thing成员的可见性，只有public、provite两个，public对外部的thing可见，provite，只对该thing内部可见。
    每个thing都要follow（遵循）协议，follow同一协议的thing，可视作同一类型。
    thing可以初始化，但没有面向对象语言中class（类）、object（实例）的含义。
    例：
      use “system/io/output”
      protocol A{
        test();
      }
      thing thingA follow A(){
          static{
            public tInt i = 1.0;
            provite tString str= “2.0”;
          }
          public tBool b= true;

          init(){
            output.println(this.thing);
          }
          public test(){
            output.println(self.str);
          }
      }
      thingA.test();
      a thingB = thingA.clone();
      thingB.init().test();

      代码说明：
      init：   该方法为内置方法，用于初始化，
      clone：  该方法为内置方法，用于克隆该方法作用的thing
      static： 关键字，用于包裹thing多次clone时的代码共享部分
      self：   该属性为内置属性，用于访问static包括的属性
      this：   用于指向当前的thing

  7.4、protocol
    s语言中，用protocol约束代码的行为，规定代码的类型。
    protocol作为粘合剂，将各种thing粘合在一起，构成一个可运行的程序。

  7.5、运行时错误处理

  7.6、作用域

  7.7、library(库)
    .本地库
    .网络传输
    .分布式运行
    .不同程序语言间的交互

  7.8、plugin(插件)

  7.9、business code layer

  7.10、跨端/多端运行

  7.11、webassembly

8、语言发展
  .建议
  .版本


  






