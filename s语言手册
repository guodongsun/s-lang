                                                                          S语言手册
                                                                              Joshua Sun
1、社区
  http://github.com/guodongsun/s-lang
  s语言作者：
    Joshua Sun
  contributors:
    . Joshua Sun

2、语言特点
  . 运行时高效：编译型语言，无虚拟机、无垃圾回收器
  . 原生功能丰富：语言层面，支持高并发、高性能、分布式(事务)
  . 类型系统：弱类型，类型推导、转换、优化
  . 极简原则：最大化屏蔽Error、Warning，容易快速Debug
  . 兼容性：向后多本兼容
  . 高质量库：插件、程序库安全稳定
  . 语言级别，代码分层，(明确开发人员分工)，提高开发效率
  . 版本升级：获得最新语言层面核心业务/系统解决方案
  . 行数限制：单个文件有效代码行数限制

3、语言目标/背景
  在语言层面，为处理诸如线程性能、安全、稳定、分布式等技术问题，以及提高编程效率、跨端/平台应用复杂等实际问题，探索/寻求/提供一种解决方案。

4、语言设计哲学/思想/方法论
  不同于面向过程的语言，如C，也不同于面向对象的语言如Java，S语言，是面向协议的语言，即POP（Protocol Oriented Programming），将世界抽象成两个核心部分：
    . protocol（协议）
    . thing（物体）
  protocol，定义thing的行为(函数/方法签名)，thing是代码执行的基本单元(实现函数/方法)，thing follow(遵循) protocol:
    . 1个thing必须follow至少1个protocol
    . 1个protocol可以被多个thing follow
    . 一到多个thing，通过protocol，组合成一个s语言程序(文件)。
    . 每个thing必需follow（遵循）至少1个协议，follow同一协议的thing，可视作同一类型。
    . thing可以定制(参数化），具有类似面向对象语言中class（类）、object（实例）的含义。

5、搭建开发环境
  下载编译器sc压缩包，如sc-0.1.linux-amd64.zip，解压到目录，即可使用，

6、工程结构/脚手架
  APP
  |- App1
      |- Module1
      |- Module2
      |_ main.sc
    |_ App2
  |-Config
    |-Public
    |-Config1
    |_Config2
  |-Library
    |-System
    |-3rd
    |_self
  Target
    |-App1
    |_App2
  |_ Test

7、s语言教程
  s语言程序文件，以”.sc”作为扩展名，执行入口是main函数。
  7.1、HelloWorld.sc :
    use “io/system/out”;
    protocol HelloWorld{
      void say();
    } 

    define thingHelloWorld follow HelloWorld{
      void say(){
        out.println(“Hello World!”);
      }
    }
    void main(){
      thingHelloWorld .say();
    }

  7.2、数据类型
    s语言中，所有的类型，都是protocol，程序运行的基本单位是thing，共有3种基础类型：
      . 数字型：Number
      . 字符(串)：String
      . 布尔型：Bool
    其它程序语言中的byte、short、float、double、char等类型，s语言中利用智能的类型优化子系统进行处理（编译时+运行时）。

  7.3、thing
    s语言中，代码组织/包装的基本单位是thing，thing的成员可以包含属性、方法
    thing特性：
      . thing成员的可见性有3个：
        . public对外部的thing可见
        . protected对被组合使用的多个protocol可见
        . provite，只对该thing内部可见
      . public、protected方法，必需在protocol中先定义，thing通过follow获得，
      . thing可见性、follow协议、协议cite，这3点，在s语言中，共同实现了Java语言中的，封装、继承、多态。
      . 每个thing必需follow（遵循）至少1个协议，follow同一协议的thing，可视作同一类型。
      . thing可以定制(参数化），但没有面向对象语言中class（类）、object（实例）的含义。
    thing通过“define”关键字创建。
    例：
      use “io/system/out”
      protocol A{
        test();
      }
      define thingA follow A(){
          static{
            public Number i = 1.0;
            provite String str= “2.0”;
          }
          public Bool b= true;

          get(){
            out.println(this.thing);
          }
          public test(){
            out.println(self.str);
          }
      }
      void main(){
        thingA.test();
        a thingB = thingA.clone();
        thingB.get().test();
      }

      代码说明：
      get：   该方法为内置方法，用于定制thing，可以有多个get，通过参数类型及个数，重载
      clone：  该方法为内置方法，用于克隆该方法作用的thing
      static： 关键字，用于包裹thing多次clone时的代码共享部分
      self：   该属性为内置属性，用于访问static包括的属性
      this：   用于指向当前的thing

  7.4、protocol
    s语言中，用protocol约束代码的行为，规定代码的类型。
    protocol作为粘合剂，将各种thing粘合在一起，构成一个可运行的程序。
    protocol特性：
      . protocol，包括多个属性、方法，可用public、protected、private修饰
      . 属性、方法，可以初始化，初始化后，thing follow该协议时，不能重写
      . 1个protocol可以cite(引用/组合)至少1个其它的protocol
        多个被cite的protocol之间，protected修饰的属性、方法，相互可见，实现内聚。
      . 1个protocol可以被多个thing follow，实现继承、多态
    协议，通过关键字“protocol”定义，通过关键字“cite”引用。
    例：
      protocol Animal{
        Number legs = 2;
        String gender;
        public void run();
      }

      protocol Person cite Animal{
        public void useComputer();
      }

      protocol Meeting{
        Bool present;
        public void time(){
          out.println(“It starts at p.m.”);
        }
        public void attend();
      }
      
      difine Engineer follow Person,Metting{
        String gender = “male”;
        String name, role;
        
        get(String name, String role, Bool present){
          this.name = name;
          this.role = role;
          this.present = present;
        }
        public void run(){
          out.println(“run fast!”);
        }
        public void useComputer(){
          out.println(“program with language s”);
        }
        public void attend(){
          out.println(this.present);
        }
      }
      
      difine Salesman follow Person,Metting{
        String gender = “female”;
        String name;
        
        get(String name, Bool present){
          this.name = name;
          out.println(this.present);
        }
        public void run(){
          out.println(“run slowly!”);
        }
        public void useComputer(){
          out.println(“keep sales records”);
        }
        public void attend(){
          out.println(this.present);
        }
      }
      
      void main(){
        Meeting a = Engineer.get(“a”, “java”, true);
        Meeting b = Engineer.get(“b”, “c/c++”, true);
        Meeting c = Salesman.get(“c”, true);
        Meeting d = Salesman.get(“d”, false);

        // 
        a.attend();
        b.attend();
        c.attend();
        d.attend();
      }
  7.5、异常、错误处理
    对于程序运行中出现的意外情况，s语言，划分为Exception、Error 2大类，用分段捕获机制处理。
    特性：
      . Exception，可以捕获，如，除零、数组越界、数据库连接超时等，源程序对应的运行时		错误
      . Error，不可以捕获，如，运行时库、宿主系统、硬件等错误
      . 调试日志，都可以生成调试日志
      . catch，Exception，通过catch捕获
      . recover，catch块中 通过recover 恢复执行
      . return，catch块中，通过return终止执行

    例：
      protocol divison{
        Number divide();
      }
      difine Calculator follow divison{
        Number divide(){
          Number a = 1;
          Number b = 2;
          Number c = 3;
          Number d = 0;
          String e = “0”;

          //
          Number a2b = a/b;
          Number a2c = a/c;
          Number a2d = a/d; // #E1
          catch{
            case DivisionWithZeroException:
            recover; // 程序从#E1处，继续向下执行
            return 1; // 程序返回，后面代码不执行
          }

          //
          Number b2c = b/c; 
          Number b2d = b/d; // #E2
          Number b/e = b/e; // #E3
          catch{
            case DivisionWithZeroException:
            recover; // 程序从#E2处，继续向下执行
            return 2; // 程序返回
            case DivisionWithIllegalTypeException:
            recover; // 程序从#E3处，继续向下执行
            return 3; // 程序返回
          }
        }
      }

    catch 捕获机制：
    . 第1个catch，捕获之前代码的所有Exception
    . 第2个catch(含)，捕获与之前最近的catch之间的Exception

  7.6、多线程、高并发
    s语言中，线程的表现形式为函数。
    
    特性：
      . thread，函数声明前置该关键字，表示为线程
      . volitile块，实现成员变量的可见性、函数代码的有序性
      . lock块，保障线程同步
      . 线程等待、唤醒，协作模型，3个角色：
        . worker，包括等待唤醒的waiter，运行中的runner
        . leader，管理waiter、runner的共享资源，当条件触发时，切换waiter、runner的运行/就绪/阻塞/状态
        . 协作顺序
          1、创建leader、resource、waiter、runner
          2、resource、waiter、runner注册到leader
          3、实现leader的线程协作Protocol方法
          4、启动leader
    例1：
      Protocal machine{
        void work();
      }
      define CleaningMachine(){
        Number number;
        String type;

        //
        volatile{
          Number cleanedProgress;
          Number uncleanedProgress;
        }

        get(Number number, String type){
          this.number = number;
          this.type = type;
        }
        thread void work(){
          lock(this){
            volatile{
              this.cleanedProgress++;
              --this.uncleanedProgress;
            }
            out.println(“cleaning”);
          }
        }
      }

    例2：
    Protocol ThreadResource{
      Array resource();
    }
    Protocol ThreadCoordinate{
      ThreadProduce in;
      ThreadConsumer out;
      TreadResource resource;
      void coordinate();
      
      void registerIn(ThreadProduce producer){
        this.in = producer;
      }
      void registerOut(ThreadConsumer consumer){
        this.out = consumer;
      }
    }
    Protocol ThreadProduce{
      void put();
    }
    Protocol ThreadConsumer{
      void take();
    }

    define MoneyBox follow ThreadResource{
      Array resource(){
        return Array.get(Number, 10); // 数组长度10，类型Number
      }
    }
    define Producer follow ThreadProducer{
      void put(ThreadResource resource){
        for(;;){
          resource.push(1);
        }
      }
    }
    define Consumer follow ThreadConsumer{
      void take(ThreadResource resource){
        for(;;){
          resource.pop();
        }
      }
    }
    define Leader follow ThreadCoordinate{
      get(TreadResource resource){
        this.resource = resource;
      }

      void coordinate(){
        if(this.resource.length > 0){
          this.out.notify();
          // this.out.nofifyAll();
        }
        else{
          this.out.wait();
        }

        //
        if(this.resource.length <= 0){
          this.in.notify();
          // this.in.nofifyAll();
        }
        else{
          this.in.wait();
        }

        //
        this.in.put(this.resource); // 启动线程 #in1
        this.in.put(this.resource); // 启动线程 #in2

        this.out.take(this.resource); // 启动线程 #out1
        this.out.take(this.resource); // 启动线程 #out2
        this.out.take(this.resource); // 启动线程 #out3
      }
    }
    void main(){
      TreadResource moneyBox = MoneyBox.get();
      ThreadCoordinate leader = Leader.get(moneyBox);
      ThreadProducer producer = Producer.get();
      ThreadConsumer consumer= Consumer.get();
      leader.registerIn(producer);
      leader.registerOut(consumer);
      leader.coordinate();
    }
    
  7.7、作用域
  
  7.8、资源管理：池化/重用、回收
    资源包括，网络连接、文件句柄等。
    特性：
      . 方法执行完成时，自动释放资源

  7.9、内联汇编AT&T，并行/分布式编译

  7.10、library(库)
      . SDK protocol 分类：
        . lang： 基础protocol，包括Protocol、Math、String、System、Thread等
        . util： 工具protocol，包括日期和时间、国际化和各种实用工具
        . io：   输入/输出protocol，包括文件系统等提供系统的输入与输出
        . net：  网络protocol，包括网络应用与开发
        . sql：  数据源protocol，数据源/数据库操作。
        . graph：图形protocol
        . text： 文本protocol
        
      . 库/文件导入：
        . namespace 命名空间
        . use 关键字
        . 路径查找规则
        
      . 本地库
      . 网络传输
      . 分布式运行
      . 不同程序语言间的交互

  7.11、plugin(插件)

  7.12、business code layer

  7.13、跨端/多端运行

  7.14、webassembly

8、语言发展
  .建议
  .版本


  






